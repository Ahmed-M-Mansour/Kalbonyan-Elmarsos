{
  "version": 3,
  "sources": ["../../../../src/get.js", "../../../../src/util/debug.js", "../../../../src/util/handler.js", "../../../../src/util/dynamodb.js"],
  "sourcesContent": ["import handler from \"./util/handler\";\nimport dynamoDb from \"./util/dynamodb\";\n\nexport const main = handler(async (event) => {\n  const params = {\n    TableName: process.env.TABLE_NAME,\n    // 'Key' defines the partition key and sort key of the item to be retrieved\n    Key: {\n      userId: event.requestContext.authorizer.iam.cognitoIdentity.identityId,\n      noteId: event.pathParameters.id, // The id of the note from the path\n    },\n  };\n\n  const result = await dynamoDb.get(params);\n  if (!result.Item) {\n    throw new Error(\"Item not found.\");\n  }\n\n  // Return the retrieved item\n  return result.Item;\n});\n", "import util from \"util\";\nimport AWS from \"aws-sdk\";\n\nlet logs;\n\n// Log AWS SDK calls\nAWS.config.logger = { log: debug };\n\nexport default function debug() {\n  logs.push({\n    date: new Date(),\n    string: util.format.apply(null, arguments),\n  });\n}\n\nexport function init(event) {\n  logs = [];\n\n  // Log API event\n  debug(\"API event\", {\n    body: event.body,\n    pathParameters: event.pathParameters,\n    queryStringParameters: event.queryStringParameters,\n  });\n}\n\nexport function flush(e) {\n  logs.forEach(({ date, string }) => console.debug(date, string));\n  console.error(e);\n}\n", "import * as debug from \"./debug\";\n\nexport default function handler(lambda) {\n  return async function (event, context) {\n    let body, statusCode;\n\n    // Start debugger\n    debug.init(event);\n\n    try {\n      // Run the Lambda\n      body = await lambda(event, context);\n      statusCode = 200;\n    } catch (e) {\n      // Print debug messages\n      debug.flush(e);\n\n      body = { error: e.message };\n      statusCode = 500;\n    }\n\n    // Return HTTP response\n    return {\n      statusCode,\n      body: JSON.stringify(body),\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Credentials\": true,\n      },\n    };\n  };\n}\n", "import AWS from \"aws-sdk\";\n\nconst client = new AWS.DynamoDB.DocumentClient();\n\nexport default {\n  get: (params) => client.get(params).promise(),\n  put: (params) => client.put(params).promise(),\n  query: (params) => client.query(params).promise(),\n  update: (params) => client.update(params).promise(),\n  delete: (params) => client.delete(params).promise(),\n};\n"],
  "mappings": "mlBAAA,wBCAA,MAAiB,mBACjB,EAAgB,sBAEZ,EAGJ,UAAI,OAAO,OAAS,CAAE,IAAK,GAEZ,YAAiB,CAC9B,EAAK,KAAK,CACR,KAAM,GAAI,MACV,OAAQ,UAAK,OAAO,MAAM,KAAM,aAI7B,WAAc,EAAO,CAC1B,EAAO,GAGP,EAAM,YAAa,CACjB,KAAM,EAAM,KACZ,eAAgB,EAAM,eACtB,sBAAuB,EAAM,wBAI1B,WAAe,EAAG,CACvB,EAAK,QAAQ,CAAC,CAAE,OAAM,YAAa,QAAQ,MAAM,EAAM,IACvD,QAAQ,MAAM,GC1BD,WAAiB,EAAQ,CACtC,MAAO,gBAAgB,EAAO,EAAS,CACrC,GAAI,GAAM,EAGV,AAAM,EAAK,GAEX,GAAI,CAEF,EAAO,KAAM,GAAO,EAAO,GAC3B,EAAa,UACN,EAAP,CAEA,AAAM,EAAM,GAEZ,EAAO,CAAE,MAAO,EAAE,SAClB,EAAa,IAIf,MAAO,CACL,aACA,KAAM,KAAK,UAAU,GACrB,QAAS,CACP,8BAA+B,IAC/B,mCAAoC,MC3B5C,MAAgB,sBAEV,EAAS,GAAI,WAAI,SAAS,eAEzB,EAAQ,CACb,IAAK,AAAC,GAAW,EAAO,IAAI,GAAQ,UACpC,IAAK,AAAC,GAAW,EAAO,IAAI,GAAQ,UACpC,MAAO,AAAC,GAAW,EAAO,MAAM,GAAQ,UACxC,OAAQ,AAAC,GAAW,EAAO,OAAO,GAAQ,UAC1C,OAAQ,AAAC,GAAW,EAAO,OAAO,GAAQ,WHNrC,GAAM,GAAO,EAAQ,KAAO,IAAU,CAC3C,GAAM,GAAS,CACb,UAAW,QAAQ,IAAI,WAEvB,IAAK,CACH,OAAQ,EAAM,eAAe,WAAW,IAAI,gBAAgB,WAC5D,OAAQ,EAAM,eAAe,KAI3B,EAAS,KAAM,GAAS,IAAI,GAClC,GAAI,CAAC,EAAO,KACV,KAAM,IAAI,OAAM,mBAIlB,MAAO,GAAO",
  "names": []
}
